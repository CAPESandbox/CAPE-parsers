name: Reusable Python and UV Setup

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string

jobs:
  setup-and-cache:
    runs-on: ubuntu-latest
    steps:
      # --- REMOVED actions/checkout@v4 ---
      # The caller workflow is responsible for checking out the code.

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Configure uv path
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache uv virtual environment
        uses: actions/cache@v4
        id: cache-uv-venv
        with:
          path: .venv
          key: ${{ runner.os }}-python-${{ inputs.python-version }}-uv-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ inputs.python-version }}-uv-

      - name: Create venv and install dependencies if cache missed
        if: steps.cache-uv-venv.outputs.cache-hit != 'true'
        run: |
          # Create the virtual environment
          uv venv --python ${{ inputs.python-version }}

          # Install dependencies from the lock file into the .venv
          # This is the most reliable and fastest way.
          uv run pip sync --all-extras pyproject.toml
          uv pip install yara-python poetry poetry-dynamic-versioning poetry-plugin-export

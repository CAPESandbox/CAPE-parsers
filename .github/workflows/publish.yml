name: Publish Python Package

on:
  release:
    types: [created] # TRIGGERS ONCE, WHEN THE GITHUB RELEASE IS PUBLISHED

# Add concurrency to prevent duplicate runs for the same tag
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # CRITICAL for dynamic versioning

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Install poetry
        shell: bash
        run: |
          PIP_BREAK_SYSTEM_PACKAGES=1 pip install poetry poetry-dynamic-versioning --user

      - name: "Build package"
        run: poetry build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/CAPE-parsers/
    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release-signing:
    name: >-
      Sign and attach distributions to GitHub Release
    needs:
      - publish-to-pypi # Runs after PyPI publish is successful
    runs-on: ubuntu-latest

    permissions:
      contents: write  # To upload assets to the release
      id-token: write  # For sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      # The release already exists, so we just upload artifacts to it
      - name: Upload assets to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'
